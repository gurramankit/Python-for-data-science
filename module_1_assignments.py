# -*- coding: utf-8 -*-
"""module-1 Assignments.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L52_ZLe5bl95jnT8tbS2npjbcimh_KVH

# Python for data science

**Module 1 If-Else Assignment-1**
Problem Statement:
You work in XYZ Corporation as a Data Analyst. Your company has told you to
work with the if-else condition.
Tasks To Be Performed:
1. Input the values of a and b as 10 and 20 respectively. Now check if a is
greater or b is greater using if condition. Think about all the edge cases,
and print the statements accordingly.
"""

T=int(input()) # To take multiple number of inputs
if T>0 :
 for i in range(T):
    x,y=map(int,input().split())
    if x > y:
        print("A is Greater")
    elif x < y:
        print("B is Greater")
    else:
        print(" A is equal to B")
else:
  print("Please give inputs")

"""**Module-1:Conditional Statements Assignment-2**

Problem Statement:
You work in XYZ Corporation as a Data Analyst. Your company has told you to
work with the if-else condition.
Tasks To Be Performed:
1. Take three user inputs and print the greatest number from those inputs
using if-else condition. Edge cases, if any, should also be handled
"""

x,y,z=map(int,input().split())
if x>y and x>z:
     print("x is greater")
elif y>x and y>z:
    print("y is greater")
else :
    print("z is greater")

from google.colab import drive
drive.mount('/content/drive')

"""**Module 1: Loops Assignment-3**

Problem Statement:
You work in XYZ Corporation as a Data Analyst. Your company has told you to
work with the looping statements.
Tasks To Be Performed:
1. Print the numbers from 1 to 10 using while loop
"""

for i in range (1,11):
  print(i)

"""**Module-1 Loops Assignments-4**

Problem Statement:
You work in XYZ Corporation as a Data Analyst. Your company has told you to
work with the looping statements.
Tasks To Be Performed:
1. Create a list that has 10, 23, 4, 26, 4, 75, 24, 54 values and with the help
of while loop fetch the even numbers and print the numbers
"""

x=[10,23,4,26,4,75,24,54]
i=0
for i in range(len(x)):
  if x[i]%2==0:
    print(x[i])

"""**Module-1 Loops Assignments-5**

Problem Statement:
You work in XYZ Corporation as a Data Analyst. Your company has told you to
work with the looping statements.
Tasks To Be Performed:
1. Create an array that has user defined inputs and with the help of for loop,
fetch all the prime numbers and print the numbers.
"""

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2,int(num**0.5)+1):
      if num % i == 0:
        return False
    return True

size = int(input("Enter the size of the array: "))
arr = []
for _ in range(size):
  arr.append(int(input()))

print("Prime numbers in the array:")
for num in arr:
  if is_prime(num):
    print(num)

"""**Module1 - case study 1**

Problem Statement:
Consider yourself to be Sam who is a data scientist. He has been invited as a
guest lecturer at a college to take an introductory session on Python.
Tasks To Be Performed:
1. Create a list containing squares of numbers from 1 to 10 (HINT: use List
Comprehension).
2. Write a function to check if the year number is a leap year.
3. Write a function to take an array and return another array that contains the
members of the first array that are even.
4. Write a function that takes 2 arrays and prints the members of the first
array that are present in the second array. (HINT: use Membership
Comprehension)

"""

sqofnum=[x**2 for x in range(1,11)]
print(sqofnum)

year=int(input("Enter year"))
if (int(year)%4==0):
  print("leap year")
else:
    print("Not a Leap Year")

def even_num(input_array):
  return[num for num in input_array if num % 2 == 0]

input_array=[1,2,3,4,5,6,7,8,9,0]
print(even_num(input_array))

list_1=[1,3,4,5,3,6,2]
list_2=[4,5,6,3,6]
common_elements=[item for item in list_2 if item in list_1]
print(common_elements)

"""**Module1 - case study 2**

Problem Statement:
Consider yourself to be Sam who is a data scientist. He has been invited as a
guest lecturer at a college to take an introductory session on Python.
Tasks To Be Performed:
1. Create 1st tuple with values -> (10, 20, 30), 2nd tuple with values -> (40,
50, 60):

a. Concatenate the two tuples and store it in “t_combine”
b. Repeat the elements of “t_combine” 3 times
c. Access the 3rd element from “t_combine”
d. Access the first three elements from “t_combine”
e. Access the last three elements from “t_combine”

2. Create a list ‘my_list’ with these elements:
a. First element is a tuple with values 1, 2, 3
b. Second element is a tuple with values “a”, “b”, “c”
c. Third element is a tuple with True,false

3. Append a new tuple – (1, ‘a’, True) to ‘my_list’:
a. Append a new list – *“sparta”, 123+ to my_list

4. Create a dictionary ‘fruit’ where:
a. The first key is ‘Fruit’ and the values are (“Apple”, “Banana”, “Mango”,
“Guava”)
b. The second key is ‘Cost’ and the values are (85, 54, 120, 70)
c. Extract all the keys from ‘fruit’
d. Extract all the values from ‘fruit’

5. Create a set named ‘my_set’ with values (1, 1, “a”, “a”, True, True) and
print the result.
"""

my_tuple1=(10,20,30)
my_tuple2=(40,50,60)
#a
t_combine=my_tuple1+my_tuple2
print(t_combine)
#b
repeat=t_combine*3
print(repeat)
#c
print(t_combine[2])
#d
print(t_combine[:3])
#e
print(t_combine[3:])

my_list=[(1,2,3),("a","b","c"),(True,False)]
print(my_list)

my_list.append((1,"a",True))
my_list.append(["saptra",123])
print(my_list)

fruit={"Fruit":("Apple","Banana","Mango","Guava"),"Cost":(85,54,120,70)}

fruit_keys=fruit.keys()
print(fruit_keys)

fruit_values=fruit.values()
print(fruit_values)

my_set={1, 1, "a", "a", True, True}
print(my_set)

